package frc.robot.commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.subsystems.Elevator;

public class ElevatorCommand extends Command {
  private final Elevator elevator;
  private final int targetStage; // The target stage (0, 1, 2, or 3)
  private final double[] stagePositions = {0.0, 2.0, 4.0, 6.0}; // Positions in ft for each stage
  private static final double TOLERANCE = 0.1; // Tolerance for reaching the target position in (ft)
  private static final double SPEED_GAIN = 0.5; // Gain for position control

  // Optional: Add voltage-based control
  private static final double VOLTAGE_GAIN = 2.0; // Gain for voltage control (volts per foot of error)

  public ElevatorCommand(Elevator elevator, int targetStage) {
    this.elevator = elevator;
    this.targetStage = targetStage;
    addRequirements(elevator);
  }

  @Override
  public void initialize() {
    // Display the target stage on SmartDashboard
    SmartDashboard.putNumber("Elevator Target Stage", targetStage);
  }

  @Override
  public void execute() {
    // Get the current position of the elevator
    double currentPosition = elevator.getPosition();

    // Calculate the error between the target position and current position
    double targetPosition = stagePositions[targetStage];
    double error = targetPosition - currentPosition;

    // Adjust motor speed based on the error (proportional control)
    double speed = error * SPEED_GAIN;
    elevator.setMotorSpeed(speed);

    // Optional: Add voltage-based control
    double voltage = error * VOLTAGE_GAIN;
    elevator.setMotorVoltage(voltage);

    // Display additional motor data on SmartDashboard
    SmartDashboard.putNumber("Elevator Current Position", currentPosition);
    SmartDashboard.putNumber("Elevator Target Position", targetPosition);
    SmartDashboard.putNumber("Elevator Motor Speed", speed);
    SmartDashboard.putNumber("Elevator Motor Voltage", voltage);
    SmartDashboard.putNumber("Elevator Motor Current", elevator.getMotorCurrent());
  }

  @Override
  public void end(boolean interrupted) {
    // Stop the motor when the command ends
    elevator.stopMotor();
  }

  @Override
  public boolean isFinished() {
    // Check if the elevator has reached the target position within the tolerance
    double currentPosition = elevator.getPosition();
    double targetPosition = stagePositions[targetStage];
    return Math.abs(currentPosition - targetPosition) < TOLERANCE;
  }
}
